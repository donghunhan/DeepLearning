# coding: utf-8
import sys, os
sys.path.append(os.pardir)  # 부모 디렉터리의 파일을 가져올 수 있도록 설정
import numpy as np
import matplotlib.pyplot as plt
#from dataset.mnist import load_mnist
from two_layer_net import TwoLayerNet


# 데이터 읽기
#(x_train, t_train), (x_test, t_test) = load_mnist(normalize=True, one_hot_label=True)
x_train = np.array([
[5.100000, 3.500000, 1.400000, 0.200000],
[7.000000, 3.200000, 4.700000, 1.400000],
[6.300000, 3.300000, 6.000000, 2.500000],
[4.900000, 3.000000, 1.400000, 0.200000],
[6.400000, 3.200000, 4.500000, 1.500000],
[5.800000, 2.700000, 5.100000, 1.900000],
[4.700000, 3.200000, 1.300000, 0.200000],
[6.900000, 3.100000, 4.900000, 1.500000],
[7.100000, 3.000000, 5.900000, 2.100000],
[4.600000, 3.100000, 1.500000, 0.200000],
[5.500000, 2.300000, 4.000000, 1.300000],
[6.300000, 2.900000, 5.600000, 1.800000],
[5.000000, 3.600000, 1.400000, 0.200000],
[6.500000, 2.800000, 4.600000, 1.500000],
[6.500000, 3.000000, 5.800000, 2.200000],
[5.400000, 3.900000, 1.700000, 0.400000],
[5.700000, 2.800000, 4.500000, 1.300000],
[7.600000, 3.000000, 6.600000, 2.100000],
[4.600000, 3.400000, 1.400000, 0.300000],
[6.300000, 3.300000, 4.700000, 1.600000],
[4.900000, 2.500000, 4.500000, 1.700000],
[5.000000, 3.400000, 1.500000, 0.200000],
[4.900000, 2.400000, 3.300000, 1.000000],
[7.300000, 2.900000, 6.300000, 1.800000],
[4.400000, 2.900000, 1.400000, 0.200000],
[6.600000, 2.900000, 4.600000, 1.300000],
[6.700000, 2.500000, 5.800000, 1.800000],
[4.900000, 3.100000, 1.500000, 0.100000],
[5.200000, 2.700000, 3.900000, 1.400000],
[7.200000, 3.600000, 6.100000, 2.500000],
[5.400000, 3.700000, 1.500000, 0.200000],
[5.000000, 2.000000, 3.500000, 1.000000],
[6.500000, 3.200000, 5.100000, 2.000000],
[4.800000, 3.400000, 1.600000, 0.200000],
[5.900000, 3.000000, 4.200000, 1.500000],
[6.800000, 3.000000, 5.500000, 2.100000],
[4.800000, 3.000000, 1.400000, 0.100000],
[6.100000, 2.900000, 4.700000, 1.400000],
[5.800000, 2.800000, 5.100000, 2.400000],
[4.300000, 3.000000, 1.100000, 0.100000],
[5.600000, 2.900000, 3.600000, 1.300000],
[6.400000, 2.700000, 5.300000, 1.900000],
[5.800000, 4.000000, 1.200000, 0.200000],
[5.600000, 3.000000, 4.500000, 1.500000],
[6.500000, 3.000000, 5.500000, 1.800000],
[5.700000, 4.400000, 1.500000, 0.400000],
[5.800000, 2.700000, 4.100000, 1.000000],
[7.700000, 3.800000, 6.700000, 2.200000],
[5.400000, 3.900000, 1.300000, 0.400000],
[5.900000, 3.200000, 4.800000, 1.800000],
[7.700000, 2.600000, 6.900000, 2.300000],
[5.100000, 3.500000, 1.400000, 0.300000],
[6.100000, 2.800000, 4.000000, 1.300000],
[6.400000, 3.200000, 5.300000, 2.300000],
[5.700000, 3.800000, 1.700000, 0.300000],
[6.700000, 3.100000, 4.400000, 1.400000],
[5.700000, 2.500000, 5.000000, 2.000000],
[5.100000, 3.800000, 1.500000, 0.300000],
[5.600000, 2.500000, 3.900000, 1.100000],
[7.700000, 2.800000, 6.700000, 2.000000],
[5.400000, 3.400000, 1.700000, 0.200000],
[6.300000, 2.500000, 4.900000, 1.500000],
[6.900000, 3.200000, 5.700000, 2.300000],
[5.100000, 3.700000, 1.500000, 0.400000],
[6.200000, 2.200000, 4.500000, 1.500000],
[6.000000, 2.200000, 5.000000, 1.500000],
[4.600000, 3.600000, 1.000000, 0.200000],
[6.000000, 2.200000, 4.000000, 1.000000],
[5.600000, 2.800000, 4.900000, 2.000000],
[5.100000, 3.300000, 1.700000, 0.500000],
[6.100000, 2.800000, 4.700000, 1.200000],
[6.300000, 2.700000, 4.900000, 1.800000],
[4.800000, 3.400000, 1.900000, 0.200000],
[6.400000, 2.900000, 4.300000, 1.300000],
[6.700000, 3.300000, 5.700000, 2.100000]
])

# t_train = np.array([
#     0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,
#     0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,
#     0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,
#     0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,
#     0,1,2,0,1,2,0,1,2,0,1,2,0,1,2
# ])
t_train = np.array([
    [1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],
    [1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],
    [1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],
    [1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],
    [1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1]
])
x_test = np.array([
[5.000000, 3.000000, 1.600000, 0.200000],
[5.000000, 3.400000, 1.600000, 0.400000],
[5.200000, 3.500000, 1.500000, 0.200000],
[5.200000, 3.400000, 1.400000, 0.200000],
[4.700000, 3.200000, 1.600000, 0.200000],
[4.800000, 3.100000, 1.600000, 0.200000],
[5.400000, 3.400000, 1.500000, 0.400000],
[5.200000, 4.100000, 1.500000, 0.100000],
[5.500000, 4.200000, 1.400000, 0.200000],
[4.900000, 3.100000, 1.500000, 0.200000],
[5.000000, 3.200000, 1.200000, 0.200000],
[5.500000, 3.500000, 1.300000, 0.200000],
[4.900000, 3.600000, 1.400000, 0.100000],
[4.400000, 3.000000, 1.300000, 0.200000],
[5.100000, 3.400000, 1.500000, 0.200000],
[5.000000, 3.500000, 1.300000, 0.300000],
[4.500000, 2.300000, 1.300000, 0.300000],
[4.400000, 3.200000, 1.300000, 0.200000],
[5.000000, 3.500000, 1.600000, 0.600000],
[5.100000, 3.800000, 1.900000, 0.400000],
[4.800000, 3.000000, 1.400000, 0.300000],
[5.100000, 3.800000, 1.600000, 0.200000],
[4.600000, 3.200000, 1.400000, 0.200000],
[5.300000, 3.700000, 1.500000, 0.200000],
[5.000000, 3.300000, 1.400000, 0.200000],
[6.600000, 3.000000, 4.400000, 1.400000],
[6.800000, 2.800000, 4.800000, 1.400000],
[6.700000, 3.000000, 5.000000, 1.700000],
[6.000000, 2.900000, 4.500000, 1.500000],
[5.700000, 2.600000, 3.500000, 1.000000],
[5.500000, 2.400000, 3.800000, 1.100000],
[5.500000, 2.400000, 3.700000, 1.000000],
[5.800000, 2.700000, 3.900000, 1.200000],
[6.000000, 2.700000, 5.100000, 1.600000],
[5.400000, 3.000000, 4.500000, 1.500000],
[6.000000, 3.400000, 4.500000, 1.600000],
[6.700000, 3.100000, 4.700000, 1.500000],
[6.300000, 2.300000, 4.400000, 1.300000],
[5.600000, 3.000000, 4.100000, 1.300000],
[5.500000, 2.500000, 4.000000, 1.300000],
[5.500000, 2.600000, 4.400000, 1.200000],
[6.100000, 3.000000, 4.600000, 1.400000],
[5.800000, 2.600000, 4.000000, 1.200000],
[5.000000, 2.300000, 3.300000, 1.000000],
[5.600000, 2.700000, 4.200000, 1.300000],
[5.700000, 3.000000, 4.200000, 1.200000],
[5.700000, 2.900000, 4.200000, 1.300000],
[6.200000, 2.900000, 4.300000, 1.300000],
[5.100000, 2.500000, 3.000000, 1.100000],
[5.700000, 2.800000, 4.100000, 1.300000],
[7.200000, 3.200000, 6.000000, 1.800000],
[6.200000, 2.800000, 4.800000, 1.800000],
[6.100000, 3.000000, 4.900000, 1.800000],
[6.400000, 2.800000, 5.600000, 2.100000],
[7.200000, 3.000000, 5.800000, 1.600000],
[7.400000, 2.800000, 6.100000, 1.900000],
[7.900000, 3.800000, 6.400000, 2.000000],
[6.400000, 2.800000, 5.600000, 2.200000],
[6.300000, 2.800000, 5.100000, 1.500000],
[6.100000, 2.600000, 5.600000, 1.400000],
[7.700000, 3.000000, 6.100000, 2.300000],
[6.300000, 3.400000, 5.600000, 2.400000],
[6.400000, 3.100000, 5.500000, 1.800000],
[6.000000, 3.000000, 4.800000, 1.800000],
[6.900000, 3.100000, 5.400000, 2.100000],
[6.700000, 3.100000, 5.600000, 2.400000],
[6.900000, 3.100000, 5.100000, 2.300000],
[5.800000, 2.700000, 5.100000, 1.900000],
[6.800000, 3.200000, 5.900000, 2.300000],
[6.700000, 3.300000, 5.700000, 2.500000],
[6.700000, 3.000000, 5.200000, 2.300000],
[6.300000, 2.500000, 5.000000, 1.900000],
[6.500000, 3.000000, 5.200000, 2.000000],
[6.200000, 3.400000, 5.400000, 2.300000],
[5.900000, 3.000000, 5.100000, 1.800000]
])

# t_test = np.array([
#     0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,
#     0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,
#     0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,
#     0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,
#     0,1,2,0,1,2,0,1,2,0,1,2,0,1,2
# ])
t_test = np.array([
    [1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],
    [1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],
    [1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],
    [1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],
    [1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1],[1,0,0],[0,1,0],[0,0,1]
])


network = TwoLayerNet(input_size=4, hidden_size=50, output_size=3)

# 하이퍼파라미터
iters_num = 1000  # 반복 횟수를 적절히 설정한다.
train_size = x_train.shape[0]
batch_size = 25   # 미니배치 크기
learning_rate = 0.1

train_loss_list = []
train_acc_list = []
test_acc_list = []

# 1에폭당 반복 수
iter_per_epoch = max(train_size / batch_size, 1)

for i in range(iters_num):
    # 미니배치 획득
    batch_mask = np.random.choice(train_size, batch_size)
    x_batch = x_train[batch_mask]
    t_batch = t_train[batch_mask]
    
    # 기울기 계산
    grad = network.numerical_gradient(x_batch, t_batch)
    #grad = network.gradient(x_batch, t_batch)
    
    # 매개변수 갱신
    for key in ('W1', 'b1', 'W2', 'b2'):
        network.params[key] -= learning_rate * grad[key]
    
    # 학습 경과 기록
    loss = network.loss(x_batch, t_batch)
    train_loss_list.append(loss)
    
    # 1에폭당 정확도 계산
    if i % iter_per_epoch == 0:
        train_acc = network.accuracy(x_train, t_train)
        test_acc = network.accuracy(x_test, t_test)
        train_acc_list.append(train_acc)
        test_acc_list.append(test_acc)
        print("train acc, test acc | " + str(train_acc) + ", " + str(test_acc))

# 그래프 그리기
markers = {'train': 'o', 'test': 's'}
x = np.arange(len(train_acc_list))
plt.plot(x, train_acc_list, label='train acc')
plt.plot(x, test_acc_list, label='test acc', linestyle='--')
plt.xlabel("epochs")
plt.ylabel("accuracy")
plt.ylim(0, 1.0)
plt.legend(loc='lower right')
plt.show()
